CI is for Dev and Test, CD is for prod.

What is Jenkins? 
    DevOps CICD tool
    Automate builds and deployments 
    Open source with over 1400 plugins

Primary focus of this course is Declarative Pipelines.

----
In CI Continous Integration 
Typically when code gets commited by a developer, 
Jenkins will immidiately start a Build,
after the Build process it will begin a Text process 

In CD Continous Delivery 
We might build a docker image, 
push it to a repository,
add a k8s file,
and deploy it. 

With jenkins we can automate the entire process.
Jenkins can be used for many individual use cases,
for cleanups, for deploying releases, standalone CI.

----
This will store the jenkins data in /your/home on the host. Ensure that /your/home is accessible by the jenkins user in container (jenkins user - uid 1000) or use -u some_other_user parameter with docker run.
    $ docker run -p 8080:8080 -p 50000:50000 -v /your/home:/var/jenkins_home jenkins
Copy and store the key somewhere safe. 

Install the suggested plugins.

Multibranch Pipelines are extremely powerful. 

----
Challenge1
    Setup Jenkins
    Create Job Challenge1
    Display "Hello from Challenge1"

Create a new item of freestyle project. 
In build specify execute shell
    echo "Hello from Challenge1"

----
Maven is used to build a java file, 
Usually Maven or Gradel are used to build java files, 

https://github.com/jenkins-docs/simple-java-maven-app

----

Relog into Jenkins 
User: admin
Password: <FROM LOG OF INITIAL RUN OF JENKINS>

We create a new Pipeline item called "My Pipeline"

----
Most popular Build Triggers are Poll SCM and Build Periodically. 
If you had a cleanup job of building something in the morning 
and tearing it down in the evening you would use Build Periodically.
Poll SCM will watch the source code managment system like github,
and if developer or anyone else makes a change,
jenkins will pick up on the change and run a job. 
Soon as a developer makes a change and commits to github, 
job now runs, builds, tests. 

----
Useful links:
Pipeline Syntax
    https://www.jenkins.io/doc/book/pipeline/syntax/
Pipeline Basic Steps
    https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/

----
Copy the Jenkins container ID
    $ docker container ls 
We execute an interactive terminal as user root and run command /bin/bash
    $ docker exec -it -u root <ID-NUMBER> /bin/bash
$ apt-get update 
$ apt-get install maven 


----
All Jenkinsfiles starts with "pipeline {}".
"agent" specifies the node or slave to run on.
Then stages block, "stages {}".
A good practice is to add a cleanup job at beginning of script,
"stage("Clean Up")", to remove remains from previous jobs. 
We specify the steps in "stage("Clean Up")".
"deleteDir()" clears the working folder. 

Jenkins creates a folder usually job name with a random string of numbers.
With each stage it revents back to the original folder.
"dir()" is the equivalent of running cd. 

Copy paste the Jenkins file into the script for "My Pipeline",
and build now. 
We can disable auto refresh so it doesnt refresh every 10sec. 

You can see the build success and logs for each stage. 
Console Output shows the entire log. 

----
One of the pains with Jenins is if the file is inside a repo. 
To avoid the hassel of cloning the project,
and attempting to correct the issue and and comitting the changes and trying the build again,
and continuing the whole process until the build doesnt fail,
we can go to build job, and click replay, 
where we see the pipeline script, 
, correct and try to rebuild from there, until we get it working,
and then copy the working script. 
As far as everyone else is concerned, we did it in a single commit. 
In some organizations though this is disabled for security reasons. 

----
Challenge2
    Create a pipeline called: Challenge2
    Create a simple pipeline script with 5 stages
        Each one numbered "Stage 1", "Stage 2", etc. 
        A simple echo "This is stage X" for each stage.
    Run it and check it works. 
    Recreate the pipeline demo. 

----
Fork the repository, 
    https://github.com/jenkins-docs/simple-java-maven-app
Modify the Jenkinsfile to remove the docker agent and commit changes .
Copy the forked repository link.
Create a new Jenkins pipeline, 
For Pipeline, change defintion to "Pipeline script from SCM", with SCM "Git",
and for script path we specify the location of Jenkinsfile which is "jenkins/Jenkinsfile".
The first time we run build it will clone repo and build,
in subsequent times it will chekout latest commits, and if there is a change it will use latest code. 

----
In Build Triggers,
one use case for Build Periodically would be to build up and tear down cloud resources at specific times a day with a terraform script. 
For Port SCM we can specify a schedule for often to check, and the most common interval in industry is 2min. 
https://crontab.guru/#2_*_*_*_*
where in script of schedule we write 2 * * * *,
which is check every 2 min, every hour, every day(month), every month, every day(week).
Saying H/2 * * * * , means run every 2min plus radom seconds between 1 and 60. 

----
We create a new item "Multi Branch" as a Multibranch Pipeline with souce git,
Jenkins will automatically look and discover new branches. 
In build configuration we set the Jenkinsfile path. 
We set Scan Multibranch Pipeline Triggers as 2 min. 
After we save.
We create a new branch called "newpipeline" 
And soon jenkins will pickup new pipeline. 

----
Parameterized Pipelines allow us to get the input before job runs. 
Checkboxes, user inputs, dropdowns. 

Create a new pipeline "boolPipeline",
in Pipeline script we paste in our Jenkins file from "Params/boolean".
We hit build now, then leave and come back and see the option build with params. 
Now when we try to build it allows us to check it, checking it sets the value was true. 

Create a new pipeline "stringPipeline",
in Pipeline script we paste in our Jenkins file from "Params/input".
We hit build now so it picks up default value, then leave and come back and see the option build with params. 
We are promted with "Which environment to deploy in?", lets say "PROD",
after building now, we check the output which is "PROD".
To check after a build is complete, as to which parameters were used, we go to Parameters. 

Create a new pipeline "choicePipeline",
in Pipeline script we paste in our Jenkins file from "Params/choice".
We hit build now so it picks up default value which is first item in array, then leave and come back and see the option build with params. 
We are promted with "Which environment to deploy in?", and we have a dropdown of values to choose from, we can select "PROD"
after building now, we check the output which is "PROD".
To check after a build is complete, as to which parameters were used, we go to Parameters. 

----
Jenkinfiles are based on Groovy which means we can use if statements and more. 

----
Challenge3
    Create a pipeline called: Challenge3
    Add 3 parameters
        Get input from our custom deployment name. 
        Select which AZ to deploy to: EU-WEST-2A, EU-WEST-2B, EU-WEST-2C
        Checkbox to confirm deployment
    Check if runs and works corrently. 


Create a new pipeline "challenge3",
in Pipeline script we paste in our Jenkins file from "Challenge3".
We hit build now so it picks up default values with same failing, then leave and come back and see the option build with params. 
We are prompted with each of the param options we set,
after building now, we check the output and its the options we selected for each of the params. 
To check after a build is complete, as to which parameters were used, we go to Parameters. 

----
Variables allow us to keep our code neat and we can store information we will use repeatedly. 
We might set up one variable for repository url, and another for a docker image name, which is usally same name as application. 
With variables we can create a template, so that we just need to swap out url or image name. 
So for throughout the pipeline, for building, testing, pushing out, building image, all steps are taken care of. 

Create a new pipeline "variablePipeline",
in Pipeline script we paste in our Jenkins file from "Variables".
We hit build now and check the output.
----

